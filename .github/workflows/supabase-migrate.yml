name: supabase-migrate

on:
  workflow_dispatch:

jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug repo layout (print workspace, tree, and SQL head)
        shell: bash
        run: |
          set -euo pipefail
          echo "pwd: $(pwd)"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE:-<not-set>}"
          echo "Top-level listing:" 
          ls -la
          echo "dev/supabase listing:"
          ls -la dev || true
          ls -la dev/supabase || true
          echo "SQL head (first 20 lines) if present:" 
          if [ -f dev/supabase/migrations/20250816_init_users_roles_devices.sql ]; then
            sed -n '1,20p' dev/supabase/migrations/20250816_init_users_roles_devices.sql || true
          else
            echo "SQL file missing"
          fi

      - name: Prepare Node runtime (npm available)
        shell: bash
        run: |
          set -euo pipefail
          echo "Ensuring Node/npm are available (npx may be used for other tasks)"
          node --version || (echo "Node.js is not installed on runner" && exit 1)
          npm --version || (echo "npm is not installed on runner" && exit 1)

      - name: Install psql client
        shell: bash
        run: |
          set -euo pipefail
          echo "Installing postgresql client (psql)"
          sudo apt-get update -y
          sudo apt-get install -y postgresql-client

      - name: Run migration SQL against Supabase (psql)
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          PGSSLMODE: require
        shell: bash
        run: |
          set -euo pipefail
          echo "Running migration via psql using SUPABASE_DB_URL secret"
          if [ -z "${SUPABASE_DB_URL:-}" ]; then
            echo "Missing required secret SUPABASE_DB_URL (postgres connection string)" >&2
            exit 1
          fi

          # determine SQL path and validate it exists; use GITHUB_WORKSPACE for absolute path
          SQL_REL_PATH="dev/supabase/migrations/20250816_init_users_roles_devices.sql"
          SQL_PATH="${GITHUB_WORKSPACE:-$PWD}/$SQL_REL_PATH"
          echo "Working directory: $(pwd)"
          echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE:-<not-set>}"
          echo "Applying: $SQL_PATH"

          if [ ! -f "$SQL_PATH" ]; then
            echo "SQL file not found: $SQL_PATH" >&2
            echo "--- Repository tree (top-level) ---" >&2
            ls -la "${GITHUB_WORKSPACE:-$PWD}" || true
            echo "--- dev/supabase tree ---" >&2
            ls -la "${GITHUB_WORKSPACE:-$PWD}/dev/supabase" || true
            echo "--- full dev tree (recursive, truncated) ---" >&2
            ls -la "${GITHUB_WORKSPACE:-$PWD}/dev" || true
            exit 1
          fi

          # psql accepts a full connection string; use absolute SQL path
          echo "SQL file stat (if exists):"
          if stat --version >/dev/null 2>&1; then
            stat "$SQL_PATH" || true
          else
            ls -la "$SQL_PATH" || true
          fi

          echo "Running: cat $SQL_PATH | psql <secret> -v ON_ERROR_STOP=1"
          # stream the SQL through psql to avoid any path resolution oddities
          cat "$SQL_PATH" | psql "$SUPABASE_DB_URL" -v ON_ERROR_STOP=1

      - name: Verify tables created (psql)
        env:
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          PGSSLMODE: require
        shell: bash
        run: |
          set -euo pipefail
          echo "select table_name from information_schema.tables where table_schema = 'public' and table_name in ('roles','users','devices');" > /tmp/verify.sql
          if [ -z "${SUPABASE_DB_URL:-}" ]; then
            echo "Missing required secret SUPABASE_DB_URL (postgres connection string)" >&2
            exit 1
          fi
          echo "Verifying via psql"
          psql "$SUPABASE_DB_URL" -At -f /tmp/verify.sql
