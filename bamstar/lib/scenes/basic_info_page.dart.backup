import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import '../theme/app_text_styles.dart';
import '../utils/toast_helper.dart';
import '../providers/auth/auth_providers.dart';
import '../providers/user/user_providers.dart';
import '../widgets/primary_text_button.dart';

/// 기본 정보 입력 페이지
/// 사용자의 이름, 소개, 생년월일, 성별 정보를 입력받는 페이지
class BasicInfoPage extends ConsumerStatefulWidget {
  const BasicInfoPage({super.key});

  @override
  ConsumerState<BasicInfoPage> createState() => _BasicInfoPageState();
}

class _BasicInfoPageState extends ConsumerState<BasicInfoPage> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _bioController = TextEditingController();
  final _birthDateController = TextEditingController();
  
  DateTime? _selectedBirthDate;
  String _selectedGender = '';
  bool _isLoading = false;

  @override
  void initState() {
    super.initState();
    _loadExistingProfile();
  }

  @override
  void dispose() {
    _nameController.dispose();
    _bioController.dispose();
    _birthDateController.dispose();
    super.dispose();
  }

  Future<void> _loadExistingProfile() async {
    // Load existing profile data if available
    final profile = await ref.read(userProfileProvider.future);
    if (profile != null) {
      setState(() {
        _nameController.text = profile.displayName ?? '';
        _bioController.text = profile.metadata?['bio'] ?? '';
        if (profile.metadata?['birthDate'] != null) {
          _selectedBirthDate = DateTime.parse(profile.metadata!['birthDate']);
          _birthDateController.text = _formatDate(_selectedBirthDate!);
        }
        _selectedGender = profile.metadata?['gender'] ?? '';
      });
    }
  }

  String _formatDate(DateTime date) {
    return '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';
  }

  Future<void> _selectBirthDate() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedBirthDate ?? DateTime.now().subtract(const Duration(days: 365 * 20)),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: Theme.of(context).colorScheme,
          ),
          child: child!,
        );
      },
    );
    
    if (picked != null && picked != _selectedBirthDate) {
      setState(() {
        _selectedBirthDate = picked;
        _birthDateController.text = _formatDate(picked);
      });
    }
  }

  Future<void> _saveBasicInfo() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    if (_selectedGender.isEmpty) {
      ToastHelper.warning(context, '성별을 선택해주세요');
      return;
    }

    setState(() {
      _isLoading = true;
    });

    try {
      final authState = await ref.read(authProvider.future);
      if (authState.user == null) {
        throw Exception('사용자 정보를 찾을 수 없습니다');
      }

      // Update user profile using the notifier
      await ref.read(userProfileNotifierProvider.notifier).updateProfile(
        displayName: _nameController.text.trim(),
        metadata: {
          'bio': _bioController.text.trim(),
          'birthDate': _selectedBirthDate?.toIso8601String(),
          'gender': _selectedGender,
        },
      );

      if (mounted) {
        ToastHelper.success(context, '기본 정보가 저장되었습니다');
        context.go('/home');
      }
    } catch (e) {
      if (mounted) {
        ToastHelper.error(context, '저장 중 오류가 발생했습니다');
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Scaffold(
      appBar: AppBar(
        title: Text(
          '기본 정보',
          style: AppTextStyles.sectionTitle(context),
        ),
        backgroundColor: theme.colorScheme.surface,
        elevation: 0,
        centerTitle: true,
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  '프로필을 완성해주세요',
                  style: AppTextStyles.pageTitle(context),
                ),
                const SizedBox(height: 8),
                Text(
                  '기본 정보를 입력하면 더 나은 서비스를 이용할 수 있어요',
                  style: AppTextStyles.secondaryText(context),
                ),
                const SizedBox(height: 32),

                // 이름 입력
                Text(
                  '이름',
                  style: AppTextStyles.formLabel(context),
                ),
                const SizedBox(height: 8),
                Container(
                  decoration: BoxDecoration(
                    color: theme.colorScheme.surfaceContainerHighest,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(
                      color: theme.colorScheme.outline.withValues(alpha: 0.2),
                    ),
                  ),
                  child: TextFormField(
                    controller: _nameController,
                    style: AppTextStyles.primaryText(context),
                    decoration: InputDecoration(
                      hintText: '이름을 입력해주세요',
                      hintStyle: AppTextStyles.secondaryText(context),
                      border: InputBorder.none,
                      contentPadding: const EdgeInsets.symmetric(
                        horizontal: 16,
                        vertical: 14,
                      ),
                    ),
                    validator: (value) {
                      if (value == null || value.isEmpty) {
                        return '이름을 입력해주세요';
                      }
                      if (value.length < 2) {
                        return '이름은 2자 이상이어야 합니다';
                      }
                      return null;
                    },
                  ),
                ),
                const SizedBox(height: 24),

                // 소개 입력
                Text(
                  '소개',
                  style: AppTextStyles.formLabel(context),
                ),
                const SizedBox(height: 8),
                TextFormField(
                  controller: _bioController,
                  maxLines: 3,
                  maxLength: 150,
                  decoration: InputDecoration(
                    hintText: '간단한 소개를 입력해주세요',
                    hintStyle: AppTextStyles.secondaryText(context),
                    filled: true,
                    fillColor: theme.colorScheme.surface,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(
                        color: theme.colorScheme.outline.withValues(alpha: 0.2),
                      ),
                    ),
                    enabledBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(
                        color: theme.colorScheme.outline.withValues(alpha: 0.2),
                      ),
                    ),
                    focusedBorder: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                      borderSide: BorderSide(
                        color: theme.colorScheme.primary,
                        width: 2,
                      ),
                    ),
                  ),
                  style: AppTextStyles.primaryText(context),
                ),
                const SizedBox(height: 24),

                // 생년월일 선택
                Text(
                  '생년월일',
                  style: AppTextStyles.formLabel(context),
                ),
                const SizedBox(height: 8),
                GestureDetector(
                  onTap: _selectBirthDate,
                  child: AbsorbPointer(
                    child: Container(
                      decoration: BoxDecoration(
                        color: theme.colorScheme.surfaceContainerHighest,
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(
                          color: theme.colorScheme.outline.withValues(alpha: 0.2),
                        ),
                      ),
                      child: TextFormField(
                        controller: _birthDateController,
                        style: AppTextStyles.primaryText(context),
                        decoration: InputDecoration(
                          hintText: '생년월일을 선택해주세요',
                          hintStyle: AppTextStyles.secondaryText(context),
                          border: InputBorder.none,
                          contentPadding: const EdgeInsets.symmetric(
                            horizontal: 16,
                            vertical: 14,
                          ),
                          suffixIcon: Icon(
                            Icons.calendar_today,
                            color: theme.colorScheme.onSurfaceVariant,
                          ),
                        ),
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 24),

                // 성별 선택
                Text(
                  '성별',
                  style: AppTextStyles.formLabel(context),
                ),
                const SizedBox(height: 12),
                Row(
                  children: [
                    Expanded(
                      child: _GenderButton(
                        label: '남성',
                        isSelected: _selectedGender == 'male',
                        onTap: () {
                          setState(() {
                            _selectedGender = 'male';
                          });
                        },
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: _GenderButton(
                        label: '여성',
                        isSelected: _selectedGender == 'female',
                        onTap: () {
                          setState(() {
                            _selectedGender = 'female';
                          });
                        },
                      ),
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: _GenderButton(
                        label: '기타',
                        isSelected: _selectedGender == 'other',
                        onTap: () {
                          setState(() {
                            _selectedGender = 'other';
                          });
                        },
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 48),

                // 저장 버튼
                _isLoading 
                  ? Container(
                      width: double.infinity,
                      padding: const EdgeInsets.symmetric(vertical: 14),
                      decoration: BoxDecoration(
                        color: theme.colorScheme.secondary.withValues(alpha: 0.5),
                        borderRadius: BorderRadius.circular(100),
                      ),
                      child: Center(
                        child: Text(
                          '저장 중...',
                          style: AppTextStyles.buttonText(context).copyWith(
                            color: theme.colorScheme.onSecondary,
                          ),
                        ),
                      ),
                    )
                  : PrimaryTextButton(
                      text: '완료하기',
                      onPressed: _saveBasicInfo,
                    ),
                const SizedBox(height: 16),
                
                // 나중에 하기 버튼
                TextButton(
                  onPressed: _isLoading ? null : () {
                    context.go('/home');
                  },
                  child: Text(
                    '나중에 하기',
                    style: AppTextStyles.secondaryText(context),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

/// 성별 선택 버튼 위젯
class _GenderButton extends StatelessWidget {
  final String label;
  final bool isSelected;
  final VoidCallback onTap;

  const _GenderButton({
    required this.label,
    required this.isSelected,
    required this.onTap,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 16),
        decoration: BoxDecoration(
          color: isSelected 
            ? theme.colorScheme.primary.withValues(alpha: 0.1)
            : theme.colorScheme.surface,
          borderRadius: BorderRadius.circular(12),
          border: Border.all(
            color: isSelected 
              ? theme.colorScheme.primary
              : theme.colorScheme.outline.withValues(alpha: 0.2),
            width: isSelected ? 2 : 1,
          ),
        ),
        child: Center(
          child: Text(
            label,
            style: isSelected 
              ? AppTextStyles.buttonText(context).copyWith(
                  color: theme.colorScheme.primary,
                )
              : AppTextStyles.secondaryText(context),
          ),
        ),
      ),
    );
  }
}