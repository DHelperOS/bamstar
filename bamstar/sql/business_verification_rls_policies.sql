-- ================================================
-- Business Verification System RLS Policies
-- ================================================
-- ÏÇ¨ÏóÖÏûê Ïù∏Ï¶ù ÏãúÏä§ÌÖú ÌÖåÏù¥Î∏îÎì§Ïóê ÎåÄÌïú Row Level Security Ï†ïÏ±Ö ÏÑ§Ï†ï

-- ================================================
-- 1. business_verifications ÌÖåÏù¥Î∏î RLS Ï†ïÏ±Ö
-- ================================================

-- RLS ÌôúÏÑ±Ìôî
ALTER TABLE public.business_verifications ENABLE ROW LEVEL SECURITY;

-- SELECT Ï†ïÏ±Ö: ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Ïù∏Ï¶ù Í∏∞Î°ùÎßå Ï°∞Ìöå Í∞ÄÎä•
CREATE POLICY "business_verifications_select_policy"
ON public.business_verifications
FOR SELECT
TO authenticated
USING (user_id = auth.uid());

-- INSERT Ï†ïÏ±Ö: ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Ïù∏Ï¶ù Í∏∞Î°ùÎßå ÏÉùÏÑ± Í∞ÄÎä•
CREATE POLICY "business_verifications_insert_policy"
ON public.business_verifications
FOR INSERT
TO authenticated
WITH CHECK (user_id = auth.uid());

-- UPDATE Ï†ïÏ±Ö: ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Ïù∏Ï¶ù Í∏∞Î°ùÎßå ÏàòÏ†ï Í∞ÄÎä•
CREATE POLICY "business_verifications_update_policy"
ON public.business_verifications
FOR UPDATE
TO authenticated
USING (user_id = auth.uid())
WITH CHECK (user_id = auth.uid());

-- DELETE Ï†ïÏ±Ö: ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Ïù∏Ï¶ù Í∏∞Î°ùÎßå ÏÇ≠Ï†ú Í∞ÄÎä• (ÏùºÎ∞òÏ†ÅÏúºÎ°ú ÎπÑÌôúÏÑ±Ìôî)
CREATE POLICY "business_verifications_delete_policy"
ON public.business_verifications
FOR DELETE
TO authenticated
USING (user_id = auth.uid());

-- ================================================
-- 2. business_registration_documents ÌÖåÏù¥Î∏î RLS Ï†ïÏ±Ö
-- ================================================

-- RLS ÌôúÏÑ±Ìôî
ALTER TABLE public.business_registration_documents ENABLE ROW LEVEL SECURITY;

-- SELECT Ï†ïÏ±Ö: ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Ïù∏Ï¶ùÏóê Í¥ÄÎ†®Îêú Î¨∏ÏÑúÎßå Ï°∞Ìöå Í∞ÄÎä•
CREATE POLICY "business_documents_select_policy"
ON public.business_registration_documents
FOR SELECT
TO authenticated
USING (
    verification_id IN (
        SELECT id FROM public.business_verifications 
        WHERE user_id = auth.uid()
    )
);

-- INSERT Ï†ïÏ±Ö: ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Ïù∏Ï¶ùÏóê Í¥ÄÎ†®Îêú Î¨∏ÏÑúÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•
CREATE POLICY "business_documents_insert_policy"
ON public.business_registration_documents
FOR INSERT
TO authenticated
WITH CHECK (
    verification_id IN (
        SELECT id FROM public.business_verifications 
        WHERE user_id = auth.uid()
    )
);

-- UPDATE Ï†ïÏ±Ö: ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Î¨∏ÏÑúÎßå ÏàòÏ†ï Í∞ÄÎä•
CREATE POLICY "business_documents_update_policy"
ON public.business_registration_documents
FOR UPDATE
TO authenticated
USING (
    verification_id IN (
        SELECT id FROM public.business_verifications 
        WHERE user_id = auth.uid()
    )
)
WITH CHECK (
    verification_id IN (
        SELECT id FROM public.business_verifications 
        WHERE user_id = auth.uid()
    )
);

-- DELETE Ï†ïÏ±Ö: ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Î¨∏ÏÑúÎßå ÏÇ≠Ï†ú Í∞ÄÎä•
CREATE POLICY "business_documents_delete_policy"
ON public.business_registration_documents
FOR DELETE
TO authenticated
USING (
    verification_id IN (
        SELECT id FROM public.business_verifications 
        WHERE user_id = auth.uid()
    )
);

-- ================================================
-- 3. business_verification_history ÌÖåÏù¥Î∏î RLS Ï†ïÏ±Ö
-- ================================================

-- RLS ÌôúÏÑ±Ìôî
ALTER TABLE public.business_verification_history ENABLE ROW LEVEL SECURITY;

-- SELECT Ï†ïÏ±Ö: ÏÇ¨Ïö©ÏûêÎäî ÏûêÏã†Ïùò Ïù∏Ï¶ù Ïù¥Î†•Îßå Ï°∞Ìöå Í∞ÄÎä•
CREATE POLICY "business_history_select_policy"
ON public.business_verification_history
FOR SELECT
TO authenticated
USING (
    verification_id IN (
        SELECT id FROM public.business_verifications 
        WHERE user_id = auth.uid()
    )
);

-- INSERT Ï†ïÏ±Ö: ÏãúÏä§ÌÖúÏóêÏÑúÎßå Ïù¥Î†• ÏÉùÏÑ± Í∞ÄÎä• (Ìä∏Î¶¨Í±∞Î•º ÌÜµÌï¥ÏÑúÎßå)
CREATE POLICY "business_history_insert_policy"
ON public.business_verification_history
FOR INSERT
TO authenticated
WITH CHECK (
    verification_id IN (
        SELECT id FROM public.business_verifications 
        WHERE user_id = auth.uid()
    )
    AND (created_by = auth.uid() OR created_by IS NULL)
);

-- UPDATE Ï†ïÏ±Ö: Ïù¥Î†•ÏùÄ ÏàòÏ†ï Î∂àÍ∞Ä (ÏùΩÍ∏∞ Ï†ÑÏö©)
-- (UPDATE Ï†ïÏ±ÖÏùÑ ÎßåÎì§ÏßÄ ÏïäÏùåÏúºÎ°úÏç® UPDATEÎ•º Ï∞®Îã®)

-- DELETE Ï†ïÏ±Ö: Ïù¥Î†•ÏùÄ ÏÇ≠Ï†ú Î∂àÍ∞Ä (ÏùΩÍ∏∞ Ï†ÑÏö©)
-- (DELETE Ï†ïÏ±ÖÏùÑ ÎßåÎì§ÏßÄ ÏïäÏùåÏúºÎ°úÏç® DELETEÎ•º Ï∞®Îã®)

-- ================================================
-- 4. Í¥ÄÎ¶¨Ïûê Ï†ïÏ±Ö (ÏÑ†ÌÉùÏÇ¨Ìï≠)
-- ================================================

-- Í¥ÄÎ¶¨Ïûê Ïó≠Ìï†Ïù¥ ÏûàÎã§Î©¥ Î™®Îì† Îç∞Ïù¥ÌÑ∞Ïóê Ï†ëÍ∑º Í∞ÄÎä•ÌïòÎèÑÎ°ù ÏÑ§Ï†ï
-- ÌòÑÏû¨Îäî Ï£ºÏÑù Ï≤òÎ¶¨ (ÌïÑÏöîÏãú ÌôúÏÑ±Ìôî)

/*
-- Í¥ÄÎ¶¨Ïûê SELECT Ï†ïÏ±Ö
CREATE POLICY "admin_business_verifications_select_policy"
ON public.business_verifications
FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM public.users 
        WHERE id = auth.uid() AND role = 'admin'
    )
);

CREATE POLICY "admin_business_documents_select_policy"
ON public.business_registration_documents
FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM public.users 
        WHERE id = auth.uid() AND role = 'admin'
    )
);

CREATE POLICY "admin_business_history_select_policy"
ON public.business_verification_history
FOR SELECT
TO authenticated
USING (
    EXISTS (
        SELECT 1 FROM public.users 
        WHERE id = auth.uid() AND role = 'admin'
    )
);
*/

-- ================================================
-- 5. Ìï®Ïàò Î≥¥Ïïà ÏÑ§Ï†ï
-- ================================================

-- ÏÇ¨Ïö©Ïûê Ïù∏Ï¶ù Ìï®ÏàòÎì§ÏùÄ SECURITY DEFINERÎ°ú ÏÑ§Ï†ïÌïòÏó¨ ÏïàÏ†ÑÌïòÍ≤å Ïã§Ìñâ
-- (Ïù¥ÎØ∏ ÏÉùÏÑ±Îêú Ìï®ÏàòÎì§ÏùÄ Í∏∞Î≥∏Ï†ÅÏúºÎ°ú SECURITY INVOKER)

-- validate_business_number Ìï®ÏàòÎäî Î™®Îì† ÏÇ¨Ïö©ÏûêÍ∞Ä ÏÇ¨Ïö© Í∞ÄÎä•
GRANT EXECUTE ON FUNCTION validate_business_number(TEXT) TO authenticated;

-- get_user_latest_business_verification Ìï®ÏàòÎäî Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©ÏûêÎßå ÏÇ¨Ïö© Í∞ÄÎä•
GRANT EXECUTE ON FUNCTION get_user_latest_business_verification(UUID) TO authenticated;

-- ================================================
-- 6. Storage Î≤ÑÌÇ∑ Ï†ïÏ±Ö (Supabase Storage)
-- ================================================

-- ÏÇ¨ÏóÖÏûê Îì±Î°ùÏ¶ù Î¨∏ÏÑúÎ•º ÏúÑÌïú Storage Î≤ÑÌÇ∑ ÏÉùÏÑ± Î∞è Ï†ïÏ±Ö ÏÑ§Ï†ï
-- Ïù¥Îäî Supabase ÎåÄÏãúÎ≥¥ÎìúÎÇò Î≥ÑÎèÑ Ïä§ÌÅ¨Î¶ΩÌä∏ÏóêÏÑú Ïã§ÌñâÌï¥Ïïº Ìï®

/*
-- Storage Î≤ÑÌÇ∑ ÏÉùÏÑ± (Supabase ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú Ïã§Ìñâ)
INSERT INTO storage.buckets (id, name, public)
VALUES ('business-documents', 'business-documents', false);

-- Storage Ï†ïÏ±Ö ÏÉùÏÑ± (Supabase ÎåÄÏãúÎ≥¥ÎìúÏóêÏÑú Ïã§Ìñâ)
CREATE POLICY "Users can upload their own business documents" ON storage.objects
FOR INSERT TO authenticated WITH CHECK (
    bucket_id = 'business-documents' 
    AND (storage.foldername(name))[1] = auth.uid()::text
);

CREATE POLICY "Users can view their own business documents" ON storage.objects
FOR SELECT TO authenticated USING (
    bucket_id = 'business-documents' 
    AND (storage.foldername(name))[1] = auth.uid()::text
);

CREATE POLICY "Users can update their own business documents" ON storage.objects
FOR UPDATE TO authenticated USING (
    bucket_id = 'business-documents' 
    AND (storage.foldername(name))[1] = auth.uid()::text
);

CREATE POLICY "Users can delete their own business documents" ON storage.objects
FOR DELETE TO authenticated USING (
    bucket_id = 'business-documents' 
    AND (storage.foldername(name))[1] = auth.uid()::text
);
*/

-- ================================================
-- 7. ÌÖåÏä§Ìä∏ Î∞è Í≤ÄÏ¶ù
-- ================================================

-- RLS Ï†ïÏ±ÖÏù¥ Ïò¨Î∞îÎ•¥Í≤å Ï†ÅÏö©ÎêòÏóàÎäîÏßÄ ÌôïÏù∏
DO $$ 
DECLARE
    rls_count INTEGER;
BEGIN
    -- business_verifications ÌÖåÏù¥Î∏îÏùò RLS Ï†ïÏ±Ö Ïàò ÌôïÏù∏
    SELECT COUNT(*) INTO rls_count
    FROM pg_policies 
    WHERE tablename = 'business_verifications' 
    AND schemaname = 'public';
    
    IF rls_count >= 4 THEN
        RAISE NOTICE '‚úÖ business_verifications RLS policies: % created', rls_count;
    ELSE
        RAISE NOTICE '‚ùå business_verifications RLS policies incomplete: only %', rls_count;
    END IF;
    
    -- business_registration_documents ÌÖåÏù¥Î∏îÏùò RLS Ï†ïÏ±Ö Ïàò ÌôïÏù∏
    SELECT COUNT(*) INTO rls_count
    FROM pg_policies 
    WHERE tablename = 'business_registration_documents' 
    AND schemaname = 'public';
    
    IF rls_count >= 4 THEN
        RAISE NOTICE '‚úÖ business_registration_documents RLS policies: % created', rls_count;
    ELSE
        RAISE NOTICE '‚ùå business_registration_documents RLS policies incomplete: only %', rls_count;
    END IF;
    
    -- business_verification_history ÌÖåÏù¥Î∏îÏùò RLS Ï†ïÏ±Ö Ïàò ÌôïÏù∏
    SELECT COUNT(*) INTO rls_count
    FROM pg_policies 
    WHERE tablename = 'business_verification_history' 
    AND schemaname = 'public';
    
    IF rls_count >= 2 THEN
        RAISE NOTICE '‚úÖ business_verification_history RLS policies: % created', rls_count;
    ELSE
        RAISE NOTICE '‚ùå business_verification_history RLS policies incomplete: only %', rls_count;
    END IF;
END $$;

-- ================================================
-- 8. Ï†ïÏ±Ö ÏöîÏïΩ
-- ================================================
DO $$ 
BEGIN
    RAISE NOTICE '';
    RAISE NOTICE 'üõ°Ô∏è  Business Verification RLS Policies Applied Successfully!';
    RAISE NOTICE '';
    RAISE NOTICE 'üìã Security Rules Summary:';
    RAISE NOTICE '   ‚úÖ Users can only access their own verification records';
    RAISE NOTICE '   ‚úÖ Users can only upload documents for their own verifications';
    RAISE NOTICE '   ‚úÖ Verification history is read-only and user-scoped';
    RAISE NOTICE '   ‚úÖ All operations require authentication (auth.uid())';
    RAISE NOTICE '';
    RAISE NOTICE 'üîê Protected Tables:';
    RAISE NOTICE '   - business_verifications (4 policies: SELECT, INSERT, UPDATE, DELETE)';
    RAISE NOTICE '   - business_registration_documents (4 policies: SELECT, INSERT, UPDATE, DELETE)';
    RAISE NOTICE '   - business_verification_history (2 policies: SELECT, INSERT only)';
    RAISE NOTICE '';
    RAISE NOTICE '‚ö†Ô∏è  Note: Storage bucket policies need to be configured separately in Supabase Dashboard';
    RAISE NOTICE '';
    RAISE NOTICE 'üß™ Next Step: Test the business verification flow with the new schema';
END $$;